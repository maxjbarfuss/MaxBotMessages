// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StandardTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StandardTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MaxBotMessages {

namespace {

const ::google::protobuf::Descriptor* Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* Double_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Double_reflection_ = NULL;
const ::google::protobuf::Descriptor* String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  String_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntStamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntStamped_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleStamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleStamped_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringStamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringStamped_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StandardTypes_2eproto() {
  protobuf_AddDesc_StandardTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StandardTypes.proto");
  GOOGLE_CHECK(file != NULL);
  Int_descriptor_ = file->message_type(0);
  static const int Int_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, value_),
  };
  Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Int_descriptor_,
      Int::default_instance_,
      Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Int));
  Double_descriptor_ = file->message_type(1);
  static const int Double_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Double, value_),
  };
  Double_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Double_descriptor_,
      Double::default_instance_,
      Double_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Double, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Double, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Double));
  String_descriptor_ = file->message_type(2);
  static const int String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, value_),
  };
  String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      String_descriptor_,
      String::default_instance_,
      String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(String));
  IntStamped_descriptor_ = file->message_type(3);
  static const int IntStamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntStamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntStamped, int__),
  };
  IntStamped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntStamped_descriptor_,
      IntStamped::default_instance_,
      IntStamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntStamped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntStamped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntStamped));
  DoubleStamped_descriptor_ = file->message_type(4);
  static const int DoubleStamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStamped, double__),
  };
  DoubleStamped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleStamped_descriptor_,
      DoubleStamped::default_instance_,
      DoubleStamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStamped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStamped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleStamped));
  StringStamped_descriptor_ = file->message_type(5);
  static const int StringStamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStamped, string_),
  };
  StringStamped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringStamped_descriptor_,
      StringStamped::default_instance_,
      StringStamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStamped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStamped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringStamped));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StandardTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Int_descriptor_, &Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Double_descriptor_, &Double::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    String_descriptor_, &String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntStamped_descriptor_, &IntStamped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleStamped_descriptor_, &DoubleStamped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringStamped_descriptor_, &StringStamped::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StandardTypes_2eproto() {
  delete Int::default_instance_;
  delete Int_reflection_;
  delete Double::default_instance_;
  delete Double_reflection_;
  delete String::default_instance_;
  delete String_reflection_;
  delete IntStamped::default_instance_;
  delete IntStamped_reflection_;
  delete DoubleStamped::default_instance_;
  delete DoubleStamped_reflection_;
  delete StringStamped::default_instance_;
  delete StringStamped_reflection_;
}

void protobuf_AddDesc_StandardTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MaxBotMessages::protobuf_AddDesc_Stamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023StandardTypes.proto\022\016MaxBotMessages\032\013S"
    "tamp.proto\"\024\n\003Int\022\r\n\005value\030\001 \002(\005\"\027\n\006Doub"
    "le\022\r\n\005value\030\001 \002(\001\"\027\n\006String\022\r\n\005value\030\001 \002"
    "(\t\"T\n\nIntStamped\022$\n\005stamp\030\001 \002(\0132\025.MaxBot"
    "Messages.Stamp\022 \n\003int\030\002 \002(\0132\023.MaxBotMess"
    "ages.Int\"]\n\rDoubleStamped\022$\n\005stamp\030\001 \002(\013"
    "2\025.MaxBotMessages.Stamp\022&\n\006double\030\002 \002(\0132"
    "\026.MaxBotMessages.Double\"]\n\rStringStamped"
    "\022$\n\005stamp\030\001 \002(\0132\025.MaxBotMessages.Stamp\022&"
    "\n\006string\030\002 \002(\0132\026.MaxBotMessages.String", 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StandardTypes.proto", &protobuf_RegisterTypes);
  Int::default_instance_ = new Int();
  Double::default_instance_ = new Double();
  String::default_instance_ = new String();
  IntStamped::default_instance_ = new IntStamped();
  DoubleStamped::default_instance_ = new DoubleStamped();
  StringStamped::default_instance_ = new StringStamped();
  Int::default_instance_->InitAsDefaultInstance();
  Double::default_instance_->InitAsDefaultInstance();
  String::default_instance_->InitAsDefaultInstance();
  IntStamped::default_instance_->InitAsDefaultInstance();
  DoubleStamped::default_instance_->InitAsDefaultInstance();
  StringStamped::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StandardTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StandardTypes_2eproto {
  StaticDescriptorInitializer_StandardTypes_2eproto() {
    protobuf_AddDesc_StandardTypes_2eproto();
  }
} static_descriptor_initializer_StandardTypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Int::kValueFieldNumber;
#endif  // !_MSC_VER

Int::Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Int)
}

void Int::InitAsDefaultInstance() {
}

Int::Int(const Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Int)
}

void Int::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int::~Int() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Int)
  SharedDtor();
}

void Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int_descriptor_;
}

const Int& Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

Int* Int::default_instance_ = NULL;

Int* Int::New() const {
  return new Int;
}

void Int::Clear() {
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Int)
  return false;
#undef DO_
}

void Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Int)
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Int)
}

::google::protobuf::uint8* Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Int)
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Int)
  return target;
}

int Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Int::Swap(Int* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int_descriptor_;
  metadata.reflection = Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Double::kValueFieldNumber;
#endif  // !_MSC_VER

Double::Double()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Double)
}

void Double::InitAsDefaultInstance() {
}

Double::Double(const Double& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Double)
}

void Double::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Double::~Double() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Double)
  SharedDtor();
}

void Double::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Double::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Double_descriptor_;
}

const Double& Double::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

Double* Double::default_instance_ = NULL;

Double* Double::New() const {
  return new Double;
}

void Double::Clear() {
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Double)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Double)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Double)
  return false;
#undef DO_
}

void Double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Double)
  // required double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Double)
}

::google::protobuf::uint8* Double::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Double)
  // required double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Double)
  return target;
}

int Double::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Double::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Double* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Double*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Double::MergeFrom(const Double& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Double::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Double::CopyFrom(const Double& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Double::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Double::Swap(Double* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Double::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Double_descriptor_;
  metadata.reflection = Double_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int String::kValueFieldNumber;
#endif  // !_MSC_VER

String::String()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.String)
}

void String::InitAsDefaultInstance() {
}

String::String(const String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.String)
}

void String::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

String::~String() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.String)
  SharedDtor();
}

void String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return String_descriptor_;
}

const String& String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

String* String::default_instance_ = NULL;

String* String::New() const {
  return new String;
}

void String::Clear() {
  if (has_value()) {
    if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      value_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.String)
  return false;
#undef DO_
}

void String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.String)
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.String)
}

::google::protobuf::uint8* String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.String)
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.String)
  return target;
}

int String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void String::Swap(String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = String_descriptor_;
  metadata.reflection = String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntStamped::kStampFieldNumber;
const int IntStamped::kIntFieldNumber;
#endif  // !_MSC_VER

IntStamped::IntStamped()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.IntStamped)
}

void IntStamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  int__ = const_cast< ::MaxBotMessages::Int*>(&::MaxBotMessages::Int::default_instance());
}

IntStamped::IntStamped(const IntStamped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.IntStamped)
}

void IntStamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  int__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntStamped::~IntStamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.IntStamped)
  SharedDtor();
}

void IntStamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete int__;
  }
}

void IntStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntStamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntStamped_descriptor_;
}

const IntStamped& IntStamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

IntStamped* IntStamped::default_instance_ = NULL;

IntStamped* IntStamped::New() const {
  return new IntStamped;
}

void IntStamped::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_int_()) {
      if (int__ != NULL) int__->::MaxBotMessages::Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.IntStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_int;
        break;
      }

      // required .MaxBotMessages.Int int = 2;
      case 2: {
        if (tag == 18) {
         parse_int:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.IntStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.IntStamped)
  return false;
#undef DO_
}

void IntStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.IntStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stamp(), output);
  }

  // required .MaxBotMessages.Int int = 2;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->int_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.IntStamped)
}

::google::protobuf::uint8* IntStamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.IntStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stamp(), target);
  }

  // required .MaxBotMessages.Int int = 2;
  if (has_int_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->int_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.IntStamped)
  return target;
}

int IntStamped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MaxBotMessages.Stamp stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamp());
    }

    // required .MaxBotMessages.Int int = 2;
    if (has_int_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntStamped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntStamped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntStamped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntStamped::MergeFrom(const IntStamped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_int_()) {
      mutable_int_()->::MaxBotMessages::Int::MergeFrom(from.int_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntStamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntStamped::CopyFrom(const IntStamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntStamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp().IsInitialized()) return false;
  }
  if (has_int_()) {
    if (!this->int_().IsInitialized()) return false;
  }
  return true;
}

void IntStamped::Swap(IntStamped* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(int__, other->int__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntStamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntStamped_descriptor_;
  metadata.reflection = IntStamped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleStamped::kStampFieldNumber;
const int DoubleStamped::kDoubleFieldNumber;
#endif  // !_MSC_VER

DoubleStamped::DoubleStamped()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.DoubleStamped)
}

void DoubleStamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  double__ = const_cast< ::MaxBotMessages::Double*>(&::MaxBotMessages::Double::default_instance());
}

DoubleStamped::DoubleStamped(const DoubleStamped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.DoubleStamped)
}

void DoubleStamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  double__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleStamped::~DoubleStamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.DoubleStamped)
  SharedDtor();
}

void DoubleStamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete double__;
  }
}

void DoubleStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleStamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleStamped_descriptor_;
}

const DoubleStamped& DoubleStamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

DoubleStamped* DoubleStamped::default_instance_ = NULL;

DoubleStamped* DoubleStamped::New() const {
  return new DoubleStamped;
}

void DoubleStamped::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_double_()) {
      if (double__ != NULL) double__->::MaxBotMessages::Double::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.DoubleStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_double;
        break;
      }

      // required .MaxBotMessages.Double double = 2;
      case 2: {
        if (tag == 18) {
         parse_double:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.DoubleStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.DoubleStamped)
  return false;
#undef DO_
}

void DoubleStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.DoubleStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stamp(), output);
  }

  // required .MaxBotMessages.Double double = 2;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->double_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.DoubleStamped)
}

::google::protobuf::uint8* DoubleStamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.DoubleStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stamp(), target);
  }

  // required .MaxBotMessages.Double double = 2;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->double_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.DoubleStamped)
  return target;
}

int DoubleStamped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MaxBotMessages.Stamp stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamp());
    }

    // required .MaxBotMessages.Double double = 2;
    if (has_double_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->double_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleStamped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleStamped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleStamped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleStamped::MergeFrom(const DoubleStamped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_double_()) {
      mutable_double_()->::MaxBotMessages::Double::MergeFrom(from.double_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleStamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleStamped::CopyFrom(const DoubleStamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp().IsInitialized()) return false;
  }
  if (has_double_()) {
    if (!this->double_().IsInitialized()) return false;
  }
  return true;
}

void DoubleStamped::Swap(DoubleStamped* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(double__, other->double__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleStamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleStamped_descriptor_;
  metadata.reflection = DoubleStamped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringStamped::kStampFieldNumber;
const int StringStamped::kStringFieldNumber;
#endif  // !_MSC_VER

StringStamped::StringStamped()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.StringStamped)
}

void StringStamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  string_ = const_cast< ::MaxBotMessages::String*>(&::MaxBotMessages::String::default_instance());
}

StringStamped::StringStamped(const StringStamped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.StringStamped)
}

void StringStamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  string_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringStamped::~StringStamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.StringStamped)
  SharedDtor();
}

void StringStamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete string_;
  }
}

void StringStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringStamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringStamped_descriptor_;
}

const StringStamped& StringStamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StandardTypes_2eproto();
  return *default_instance_;
}

StringStamped* StringStamped::default_instance_ = NULL;

StringStamped* StringStamped::New() const {
  return new StringStamped;
}

void StringStamped::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_string()) {
      if (string_ != NULL) string_->::MaxBotMessages::String::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.StringStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_string;
        break;
      }

      // required .MaxBotMessages.String string = 2;
      case 2: {
        if (tag == 18) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.StringStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.StringStamped)
  return false;
#undef DO_
}

void StringStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.StringStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stamp(), output);
  }

  // required .MaxBotMessages.String string = 2;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.StringStamped)
}

::google::protobuf::uint8* StringStamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.StringStamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stamp(), target);
  }

  // required .MaxBotMessages.String string = 2;
  if (has_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.StringStamped)
  return target;
}

int StringStamped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MaxBotMessages.Stamp stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamp());
    }

    // required .MaxBotMessages.String string = 2;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringStamped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringStamped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringStamped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringStamped::MergeFrom(const StringStamped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_string()) {
      mutable_string()->::MaxBotMessages::String::MergeFrom(from.string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringStamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringStamped::CopyFrom(const StringStamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp().IsInitialized()) return false;
  }
  if (has_string()) {
    if (!this->string().IsInitialized()) return false;
  }
  return true;
}

void StringStamped::Swap(StringStamped* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(string_, other->string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringStamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringStamped_descriptor_;
  metadata.reflection = StringStamped_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxBotMessages

// @@protoc_insertion_point(global_scope)
