// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MaxBotMessages {

namespace {

const ::google::protobuf::Descriptor* Pose2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose2Stamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose2Stamped_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose3Stamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose3Stamped_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pose_2eproto() {
  protobuf_AddDesc_Pose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pose.proto");
  GOOGLE_CHECK(file != NULL);
  Pose2_descriptor_ = file->message_type(0);
  static const int Pose2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2, heading_),
  };
  Pose2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose2_descriptor_,
      Pose2::default_instance_,
      Pose2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pose2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2, _internal_metadata_),
      -1);
  Pose2Stamped_descriptor_ = file->message_type(1);
  static const int Pose2Stamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2Stamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2Stamped, pose_),
  };
  Pose2Stamped_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose2Stamped_descriptor_,
      Pose2Stamped::default_instance_,
      Pose2Stamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2Stamped, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pose2Stamped),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose2Stamped, _internal_metadata_),
      -1);
  Pose3_descriptor_ = file->message_type(2);
  static const int Pose3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3, orientation_),
  };
  Pose3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose3_descriptor_,
      Pose3::default_instance_,
      Pose3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pose3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3, _internal_metadata_),
      -1);
  Pose3Stamped_descriptor_ = file->message_type(3);
  static const int Pose3Stamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3Stamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3Stamped, pose_),
  };
  Pose3Stamped_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose3Stamped_descriptor_,
      Pose3Stamped::default_instance_,
      Pose3Stamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3Stamped, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pose3Stamped),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3Stamped, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose2_descriptor_, &Pose2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose2Stamped_descriptor_, &Pose2Stamped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose3_descriptor_, &Pose3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose3Stamped_descriptor_, &Pose3Stamped::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pose_2eproto() {
  delete Pose2::default_instance_;
  delete Pose2_reflection_;
  delete Pose2Stamped::default_instance_;
  delete Pose2Stamped_reflection_;
  delete Pose3::default_instance_;
  delete Pose3_reflection_;
  delete Pose3Stamped::default_instance_;
  delete Pose3Stamped_reflection_;
}

void protobuf_AddDesc_Pose_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MaxBotMessages::protobuf_AddDesc_Stamp_2eproto();
  ::MaxBotMessages::protobuf_AddDesc_Vector_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nPose.proto\022\016MaxBotMessages\032\013Stamp.prot"
    "o\032\014Vector.proto\".\n\005Pose2\022\t\n\001x\030\001 \002(\001\022\t\n\001y"
    "\030\002 \002(\001\022\017\n\007heading\030\003 \002(\001\"Y\n\014Pose2Stamped\022"
    "$\n\005stamp\030\001 \002(\0132\025.MaxBotMessages.Stamp\022#\n"
    "\004pose\030\002 \002(\0132\025.MaxBotMessages.Pose2\"c\n\005Po"
    "se3\022)\n\010position\030\001 \002(\0132\027.MaxBotMessages.V"
    "ector3\022/\n\013orientation\030\002 \002(\0132\032.MaxBotMess"
    "ages.Quaternion\"Y\n\014Pose3Stamped\022$\n\005stamp"
    "\030\001 \002(\0132\025.MaxBotMessages.Stamp\022#\n\004pose\030\002 "
    "\002(\0132\025.MaxBotMessages.Pose3", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pose.proto", &protobuf_RegisterTypes);
  Pose2::default_instance_ = new Pose2();
  Pose2Stamped::default_instance_ = new Pose2Stamped();
  Pose3::default_instance_ = new Pose3();
  Pose3Stamped::default_instance_ = new Pose3Stamped();
  Pose2::default_instance_->InitAsDefaultInstance();
  Pose2Stamped::default_instance_->InitAsDefaultInstance();
  Pose3::default_instance_->InitAsDefaultInstance();
  Pose3Stamped::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pose_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pose_2eproto {
  StaticDescriptorInitializer_Pose_2eproto() {
    protobuf_AddDesc_Pose_2eproto();
  }
} static_descriptor_initializer_Pose_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose2::kXFieldNumber;
const int Pose2::kYFieldNumber;
const int Pose2::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose2::Pose2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Pose2)
}

void Pose2::InitAsDefaultInstance() {
}

Pose2::Pose2(const Pose2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Pose2)
}

void Pose2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose2::~Pose2() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Pose2)
  SharedDtor();
}

void Pose2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pose2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose2_descriptor_;
}

const Pose2& Pose2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose_2eproto();
  return *default_instance_;
}

Pose2* Pose2::default_instance_ = NULL;

Pose2* Pose2::New(::google::protobuf::Arena* arena) const {
  Pose2* n = new Pose2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose2::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pose2*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, heading_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pose2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Pose2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // required double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Pose2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Pose2)
  return false;
#undef DO_
}

void Pose2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Pose2)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Pose2)
}

::google::protobuf::uint8* Pose2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Pose2)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Pose2)
  return target;
}

int Pose2::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_heading()) {
    // required double heading = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int Pose2::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double heading = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pose2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose2::MergeFrom(const Pose2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pose2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2::CopyFrom(const Pose2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Pose2::Swap(Pose2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose2::InternalSwap(Pose2* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose2_descriptor_;
  metadata.reflection = Pose2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose2

// required double x = 1;
bool Pose2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose2::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Pose2::x() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose2.x)
  return x_;
}
 void Pose2::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Pose2.x)
}

// required double y = 2;
bool Pose2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose2::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Pose2::y() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose2.y)
  return y_;
}
 void Pose2::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Pose2.y)
}

// required double heading = 3;
bool Pose2::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pose2::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void Pose2::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pose2::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
 double Pose2::heading() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose2.heading)
  return heading_;
}
 void Pose2::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Pose2.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose2Stamped::kStampFieldNumber;
const int Pose2Stamped::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose2Stamped::Pose2Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Pose2Stamped)
}

void Pose2Stamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  pose_ = const_cast< ::MaxBotMessages::Pose2*>(&::MaxBotMessages::Pose2::default_instance());
}

Pose2Stamped::Pose2Stamped(const Pose2Stamped& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Pose2Stamped)
}

void Pose2Stamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose2Stamped::~Pose2Stamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Pose2Stamped)
  SharedDtor();
}

void Pose2Stamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete pose_;
  }
}

void Pose2Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose2Stamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose2Stamped_descriptor_;
}

const Pose2Stamped& Pose2Stamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose_2eproto();
  return *default_instance_;
}

Pose2Stamped* Pose2Stamped::default_instance_ = NULL;

Pose2Stamped* Pose2Stamped::New(::google::protobuf::Arena* arena) const {
  Pose2Stamped* n = new Pose2Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose2Stamped::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::MaxBotMessages::Pose2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pose2Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Pose2Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // required .MaxBotMessages.Pose2 pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Pose2Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Pose2Stamped)
  return false;
#undef DO_
}

void Pose2Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Pose2Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required .MaxBotMessages.Pose2 pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Pose2Stamped)
}

::google::protobuf::uint8* Pose2Stamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Pose2Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stamp_, target);
  }

  // required .MaxBotMessages.Pose2 pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pose_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Pose2Stamped)
  return target;
}

int Pose2Stamped::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stamp()) {
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_pose()) {
    // required .MaxBotMessages.Pose2 pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  return total_size;
}
int Pose2Stamped::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required .MaxBotMessages.Pose2 pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose2Stamped::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pose2Stamped* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose2Stamped>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose2Stamped::MergeFrom(const Pose2Stamped& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_pose()) {
      mutable_pose()->::MaxBotMessages::Pose2::MergeFrom(from.pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pose2Stamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2Stamped::CopyFrom(const Pose2Stamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2Stamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void Pose2Stamped::Swap(Pose2Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose2Stamped::InternalSwap(Pose2Stamped* other) {
  std::swap(stamp_, other->stamp_);
  std::swap(pose_, other->pose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose2Stamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose2Stamped_descriptor_;
  metadata.reflection = Pose2Stamped_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose2Stamped

// required .MaxBotMessages.Stamp stamp = 1;
bool Pose2Stamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose2Stamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose2Stamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose2Stamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
const ::MaxBotMessages::Stamp& Pose2Stamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose2Stamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::MaxBotMessages::Stamp* Pose2Stamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose2Stamped.stamp)
  return stamp_;
}
::MaxBotMessages::Stamp* Pose2Stamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Pose2Stamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose2Stamped.stamp)
}

// required .MaxBotMessages.Pose2 pose = 2;
bool Pose2Stamped::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose2Stamped::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose2Stamped::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose2Stamped::clear_pose() {
  if (pose_ != NULL) pose_->::MaxBotMessages::Pose2::Clear();
  clear_has_pose();
}
const ::MaxBotMessages::Pose2& Pose2Stamped::pose() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose2Stamped.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::MaxBotMessages::Pose2* Pose2Stamped::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::MaxBotMessages::Pose2;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose2Stamped.pose)
  return pose_;
}
::MaxBotMessages::Pose2* Pose2Stamped::release_pose() {
  clear_has_pose();
  ::MaxBotMessages::Pose2* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Pose2Stamped::set_allocated_pose(::MaxBotMessages::Pose2* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose2Stamped.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose3::kPositionFieldNumber;
const int Pose3::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose3::Pose3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Pose3)
}

void Pose3::InitAsDefaultInstance() {
  position_ = const_cast< ::MaxBotMessages::Vector3*>(&::MaxBotMessages::Vector3::default_instance());
  orientation_ = const_cast< ::MaxBotMessages::Quaternion*>(&::MaxBotMessages::Quaternion::default_instance());
}

Pose3::Pose3(const Pose3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Pose3)
}

void Pose3::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose3::~Pose3() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Pose3)
  SharedDtor();
}

void Pose3::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
  }
}

void Pose3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose3_descriptor_;
}

const Pose3& Pose3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose_2eproto();
  return *default_instance_;
}

Pose3* Pose3::default_instance_ = NULL;

Pose3* Pose3::New(::google::protobuf::Arena* arena) const {
  Pose3* n = new Pose3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose3::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_position()) {
      if (position_ != NULL) position_->::MaxBotMessages::Vector3::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::MaxBotMessages::Quaternion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pose3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Pose3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Vector3 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // required .MaxBotMessages.Quaternion orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Pose3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Pose3)
  return false;
#undef DO_
}

void Pose3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Pose3)
  // required .MaxBotMessages.Vector3 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // required .MaxBotMessages.Quaternion orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Pose3)
}

::google::protobuf::uint8* Pose3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Pose3)
  // required .MaxBotMessages.Vector3 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->position_, target);
  }

  // required .MaxBotMessages.Quaternion orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->orientation_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Pose3)
  return target;
}

int Pose3::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_position()) {
    // required .MaxBotMessages.Vector3 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  if (has_orientation()) {
    // required .MaxBotMessages.Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  return total_size;
}
int Pose3::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Vector3 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);

    // required .MaxBotMessages.Quaternion orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pose3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose3::MergeFrom(const Pose3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::MaxBotMessages::Vector3::MergeFrom(from.position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::MaxBotMessages::Quaternion::MergeFrom(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pose3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose3::CopyFrom(const Pose3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Pose3::Swap(Pose3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose3::InternalSwap(Pose3* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose3_descriptor_;
  metadata.reflection = Pose3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose3

// required .MaxBotMessages.Vector3 position = 1;
bool Pose3::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose3::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose3::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose3::clear_position() {
  if (position_ != NULL) position_->::MaxBotMessages::Vector3::Clear();
  clear_has_position();
}
const ::MaxBotMessages::Vector3& Pose3::position() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose3.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::MaxBotMessages::Vector3* Pose3::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::MaxBotMessages::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose3.position)
  return position_;
}
::MaxBotMessages::Vector3* Pose3::release_position() {
  clear_has_position();
  ::MaxBotMessages::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void Pose3::set_allocated_position(::MaxBotMessages::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose3.position)
}

// required .MaxBotMessages.Quaternion orientation = 2;
bool Pose3::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose3::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose3::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose3::clear_orientation() {
  if (orientation_ != NULL) orientation_->::MaxBotMessages::Quaternion::Clear();
  clear_has_orientation();
}
const ::MaxBotMessages::Quaternion& Pose3::orientation() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose3.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::MaxBotMessages::Quaternion* Pose3::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::MaxBotMessages::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose3.orientation)
  return orientation_;
}
::MaxBotMessages::Quaternion* Pose3::release_orientation() {
  clear_has_orientation();
  ::MaxBotMessages::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Pose3::set_allocated_orientation(::MaxBotMessages::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose3.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose3Stamped::kStampFieldNumber;
const int Pose3Stamped::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose3Stamped::Pose3Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Pose3Stamped)
}

void Pose3Stamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  pose_ = const_cast< ::MaxBotMessages::Pose3*>(&::MaxBotMessages::Pose3::default_instance());
}

Pose3Stamped::Pose3Stamped(const Pose3Stamped& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Pose3Stamped)
}

void Pose3Stamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose3Stamped::~Pose3Stamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Pose3Stamped)
  SharedDtor();
}

void Pose3Stamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete pose_;
  }
}

void Pose3Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose3Stamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose3Stamped_descriptor_;
}

const Pose3Stamped& Pose3Stamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pose_2eproto();
  return *default_instance_;
}

Pose3Stamped* Pose3Stamped::default_instance_ = NULL;

Pose3Stamped* Pose3Stamped::New(::google::protobuf::Arena* arena) const {
  Pose3Stamped* n = new Pose3Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose3Stamped::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::MaxBotMessages::Pose3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pose3Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Pose3Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // required .MaxBotMessages.Pose3 pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Pose3Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Pose3Stamped)
  return false;
#undef DO_
}

void Pose3Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Pose3Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required .MaxBotMessages.Pose3 pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Pose3Stamped)
}

::google::protobuf::uint8* Pose3Stamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Pose3Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stamp_, target);
  }

  // required .MaxBotMessages.Pose3 pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pose_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Pose3Stamped)
  return target;
}

int Pose3Stamped::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stamp()) {
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_pose()) {
    // required .MaxBotMessages.Pose3 pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  return total_size;
}
int Pose3Stamped::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required .MaxBotMessages.Pose3 pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose3Stamped::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pose3Stamped* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose3Stamped>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose3Stamped::MergeFrom(const Pose3Stamped& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_pose()) {
      mutable_pose()->::MaxBotMessages::Pose3::MergeFrom(from.pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pose3Stamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose3Stamped::CopyFrom(const Pose3Stamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose3Stamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  return true;
}

void Pose3Stamped::Swap(Pose3Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose3Stamped::InternalSwap(Pose3Stamped* other) {
  std::swap(stamp_, other->stamp_);
  std::swap(pose_, other->pose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose3Stamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose3Stamped_descriptor_;
  metadata.reflection = Pose3Stamped_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose3Stamped

// required .MaxBotMessages.Stamp stamp = 1;
bool Pose3Stamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose3Stamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose3Stamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose3Stamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
const ::MaxBotMessages::Stamp& Pose3Stamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose3Stamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::MaxBotMessages::Stamp* Pose3Stamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose3Stamped.stamp)
  return stamp_;
}
::MaxBotMessages::Stamp* Pose3Stamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Pose3Stamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose3Stamped.stamp)
}

// required .MaxBotMessages.Pose3 pose = 2;
bool Pose3Stamped::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose3Stamped::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose3Stamped::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose3Stamped::clear_pose() {
  if (pose_ != NULL) pose_->::MaxBotMessages::Pose3::Clear();
  clear_has_pose();
}
const ::MaxBotMessages::Pose3& Pose3Stamped::pose() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Pose3Stamped.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::MaxBotMessages::Pose3* Pose3Stamped::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::MaxBotMessages::Pose3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Pose3Stamped.pose)
  return pose_;
}
::MaxBotMessages::Pose3* Pose3Stamped::release_pose() {
  clear_has_pose();
  ::MaxBotMessages::Pose3* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Pose3Stamped::set_allocated_pose(::MaxBotMessages::Pose3* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Pose3Stamped.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxBotMessages

// @@protoc_insertion_point(global_scope)
