// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Velocity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Velocity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MaxBotMessages {

namespace {

const ::google::protobuf::Descriptor* Velocity3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Velocity3Stamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity3Stamped_reflection_ = NULL;
const ::google::protobuf::Descriptor* Velocity2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Velocity2Stamped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity2Stamped_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Velocity_2eproto() {
  protobuf_AddDesc_Velocity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Velocity.proto");
  GOOGLE_CHECK(file != NULL);
  Velocity3_descriptor_ = file->message_type(0);
  static const int Velocity3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3, angular_),
  };
  Velocity3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Velocity3_descriptor_,
      Velocity3::default_instance_,
      Velocity3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3, _has_bits_[0]),
      -1,
      -1,
      sizeof(Velocity3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3, _internal_metadata_),
      -1);
  Velocity3Stamped_descriptor_ = file->message_type(1);
  static const int Velocity3Stamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3Stamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3Stamped, velocity_),
  };
  Velocity3Stamped_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Velocity3Stamped_descriptor_,
      Velocity3Stamped::default_instance_,
      Velocity3Stamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3Stamped, _has_bits_[0]),
      -1,
      -1,
      sizeof(Velocity3Stamped),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity3Stamped, _internal_metadata_),
      -1);
  Velocity2_descriptor_ = file->message_type(2);
  static const int Velocity2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2, angular_),
  };
  Velocity2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Velocity2_descriptor_,
      Velocity2::default_instance_,
      Velocity2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2, _has_bits_[0]),
      -1,
      -1,
      sizeof(Velocity2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2, _internal_metadata_),
      -1);
  Velocity2Stamped_descriptor_ = file->message_type(3);
  static const int Velocity2Stamped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2Stamped, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2Stamped, velocity_),
  };
  Velocity2Stamped_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Velocity2Stamped_descriptor_,
      Velocity2Stamped::default_instance_,
      Velocity2Stamped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2Stamped, _has_bits_[0]),
      -1,
      -1,
      sizeof(Velocity2Stamped),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity2Stamped, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Velocity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Velocity3_descriptor_, &Velocity3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Velocity3Stamped_descriptor_, &Velocity3Stamped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Velocity2_descriptor_, &Velocity2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Velocity2Stamped_descriptor_, &Velocity2Stamped::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Velocity_2eproto() {
  delete Velocity3::default_instance_;
  delete Velocity3_reflection_;
  delete Velocity3Stamped::default_instance_;
  delete Velocity3Stamped_reflection_;
  delete Velocity2::default_instance_;
  delete Velocity2_reflection_;
  delete Velocity2Stamped::default_instance_;
  delete Velocity2Stamped_reflection_;
}

void protobuf_AddDesc_Velocity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MaxBotMessages::protobuf_AddDesc_Stamp_2eproto();
  ::MaxBotMessages::protobuf_AddDesc_Vector_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Velocity.proto\022\016MaxBotMessages\032\013Stamp."
    "proto\032\014Vector.proto\"^\n\tVelocity3\022\'\n\006line"
    "ar\030\001 \002(\0132\027.MaxBotMessages.Vector3\022(\n\007ang"
    "ular\030\002 \002(\0132\027.MaxBotMessages.Vector3\"e\n\020V"
    "elocity3Stamped\022$\n\005stamp\030\001 \002(\0132\025.MaxBotM"
    "essages.Stamp\022+\n\010velocity\030\002 \002(\0132\031.MaxBot"
    "Messages.Velocity3\",\n\tVelocity2\022\016\n\006linea"
    "r\030\001 \002(\001\022\017\n\007angular\030\002 \002(\001\"e\n\020Velocity2Sta"
    "mped\022$\n\005stamp\030\001 \002(\0132\025.MaxBotMessages.Sta"
    "mp\022+\n\010velocity\030\002 \002(\0132\031.MaxBotMessages.Ve"
    "locity2", 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Velocity.proto", &protobuf_RegisterTypes);
  Velocity3::default_instance_ = new Velocity3();
  Velocity3Stamped::default_instance_ = new Velocity3Stamped();
  Velocity2::default_instance_ = new Velocity2();
  Velocity2Stamped::default_instance_ = new Velocity2Stamped();
  Velocity3::default_instance_->InitAsDefaultInstance();
  Velocity3Stamped::default_instance_->InitAsDefaultInstance();
  Velocity2::default_instance_->InitAsDefaultInstance();
  Velocity2Stamped::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Velocity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Velocity_2eproto {
  StaticDescriptorInitializer_Velocity_2eproto() {
    protobuf_AddDesc_Velocity_2eproto();
  }
} static_descriptor_initializer_Velocity_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity3::kLinearFieldNumber;
const int Velocity3::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity3::Velocity3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Velocity3)
}

void Velocity3::InitAsDefaultInstance() {
  linear_ = const_cast< ::MaxBotMessages::Vector3*>(&::MaxBotMessages::Vector3::default_instance());
  angular_ = const_cast< ::MaxBotMessages::Vector3*>(&::MaxBotMessages::Vector3::default_instance());
}

Velocity3::Velocity3(const Velocity3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Velocity3)
}

void Velocity3::SharedCtor() {
  _cached_size_ = 0;
  linear_ = NULL;
  angular_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity3::~Velocity3() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Velocity3)
  SharedDtor();
}

void Velocity3::SharedDtor() {
  if (this != default_instance_) {
    delete linear_;
    delete angular_;
  }
}

void Velocity3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity3_descriptor_;
}

const Velocity3& Velocity3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Velocity_2eproto();
  return *default_instance_;
}

Velocity3* Velocity3::default_instance_ = NULL;

Velocity3* Velocity3::New(::google::protobuf::Arena* arena) const {
  Velocity3* n = new Velocity3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity3::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_linear()) {
      if (linear_ != NULL) linear_->::MaxBotMessages::Vector3::Clear();
    }
    if (has_angular()) {
      if (angular_ != NULL) angular_->::MaxBotMessages::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Velocity3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Velocity3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Vector3 linear = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angular;
        break;
      }

      // required .MaxBotMessages.Vector3 angular = 2;
      case 2: {
        if (tag == 18) {
         parse_angular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Velocity3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Velocity3)
  return false;
#undef DO_
}

void Velocity3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Velocity3)
  // required .MaxBotMessages.Vector3 linear = 1;
  if (has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // required .MaxBotMessages.Vector3 angular = 2;
  if (has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Velocity3)
}

::google::protobuf::uint8* Velocity3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Velocity3)
  // required .MaxBotMessages.Vector3 linear = 1;
  if (has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->linear_, target);
  }

  // required .MaxBotMessages.Vector3 angular = 2;
  if (has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->angular_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Velocity3)
  return target;
}

int Velocity3::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_linear()) {
    // required .MaxBotMessages.Vector3 linear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  if (has_angular()) {
    // required .MaxBotMessages.Vector3 angular = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  return total_size;
}
int Velocity3::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Vector3 linear = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);

    // required .MaxBotMessages.Vector3 angular = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Velocity3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity3::MergeFrom(const Velocity3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear()) {
      mutable_linear()->::MaxBotMessages::Vector3::MergeFrom(from.linear());
    }
    if (from.has_angular()) {
      mutable_angular()->::MaxBotMessages::Vector3::MergeFrom(from.angular());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Velocity3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity3::CopyFrom(const Velocity3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_linear()) {
    if (!this->linear_->IsInitialized()) return false;
  }
  if (has_angular()) {
    if (!this->angular_->IsInitialized()) return false;
  }
  return true;
}

void Velocity3::Swap(Velocity3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity3::InternalSwap(Velocity3* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity3_descriptor_;
  metadata.reflection = Velocity3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity3

// required .MaxBotMessages.Vector3 linear = 1;
bool Velocity3::has_linear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Velocity3::set_has_linear() {
  _has_bits_[0] |= 0x00000001u;
}
void Velocity3::clear_has_linear() {
  _has_bits_[0] &= ~0x00000001u;
}
void Velocity3::clear_linear() {
  if (linear_ != NULL) linear_->::MaxBotMessages::Vector3::Clear();
  clear_has_linear();
}
const ::MaxBotMessages::Vector3& Velocity3::linear() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity3.linear)
  return linear_ != NULL ? *linear_ : *default_instance_->linear_;
}
::MaxBotMessages::Vector3* Velocity3::mutable_linear() {
  set_has_linear();
  if (linear_ == NULL) {
    linear_ = new ::MaxBotMessages::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity3.linear)
  return linear_;
}
::MaxBotMessages::Vector3* Velocity3::release_linear() {
  clear_has_linear();
  ::MaxBotMessages::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Velocity3::set_allocated_linear(::MaxBotMessages::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    set_has_linear();
  } else {
    clear_has_linear();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity3.linear)
}

// required .MaxBotMessages.Vector3 angular = 2;
bool Velocity3::has_angular() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Velocity3::set_has_angular() {
  _has_bits_[0] |= 0x00000002u;
}
void Velocity3::clear_has_angular() {
  _has_bits_[0] &= ~0x00000002u;
}
void Velocity3::clear_angular() {
  if (angular_ != NULL) angular_->::MaxBotMessages::Vector3::Clear();
  clear_has_angular();
}
const ::MaxBotMessages::Vector3& Velocity3::angular() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity3.angular)
  return angular_ != NULL ? *angular_ : *default_instance_->angular_;
}
::MaxBotMessages::Vector3* Velocity3::mutable_angular() {
  set_has_angular();
  if (angular_ == NULL) {
    angular_ = new ::MaxBotMessages::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity3.angular)
  return angular_;
}
::MaxBotMessages::Vector3* Velocity3::release_angular() {
  clear_has_angular();
  ::MaxBotMessages::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Velocity3::set_allocated_angular(::MaxBotMessages::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    set_has_angular();
  } else {
    clear_has_angular();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity3.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity3Stamped::kStampFieldNumber;
const int Velocity3Stamped::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity3Stamped::Velocity3Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Velocity3Stamped)
}

void Velocity3Stamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  velocity_ = const_cast< ::MaxBotMessages::Velocity3*>(&::MaxBotMessages::Velocity3::default_instance());
}

Velocity3Stamped::Velocity3Stamped(const Velocity3Stamped& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Velocity3Stamped)
}

void Velocity3Stamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity3Stamped::~Velocity3Stamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Velocity3Stamped)
  SharedDtor();
}

void Velocity3Stamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete velocity_;
  }
}

void Velocity3Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity3Stamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity3Stamped_descriptor_;
}

const Velocity3Stamped& Velocity3Stamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Velocity_2eproto();
  return *default_instance_;
}

Velocity3Stamped* Velocity3Stamped::default_instance_ = NULL;

Velocity3Stamped* Velocity3Stamped::New(::google::protobuf::Arena* arena) const {
  Velocity3Stamped* n = new Velocity3Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity3Stamped::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::MaxBotMessages::Velocity3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Velocity3Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Velocity3Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // required .MaxBotMessages.Velocity3 velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Velocity3Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Velocity3Stamped)
  return false;
#undef DO_
}

void Velocity3Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Velocity3Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required .MaxBotMessages.Velocity3 velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Velocity3Stamped)
}

::google::protobuf::uint8* Velocity3Stamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Velocity3Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stamp_, target);
  }

  // required .MaxBotMessages.Velocity3 velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->velocity_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Velocity3Stamped)
  return target;
}

int Velocity3Stamped::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stamp()) {
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_velocity()) {
    // required .MaxBotMessages.Velocity3 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  return total_size;
}
int Velocity3Stamped::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required .MaxBotMessages.Velocity3 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity3Stamped::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Velocity3Stamped* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity3Stamped>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity3Stamped::MergeFrom(const Velocity3Stamped& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::MaxBotMessages::Velocity3::MergeFrom(from.velocity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Velocity3Stamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity3Stamped::CopyFrom(const Velocity3Stamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity3Stamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void Velocity3Stamped::Swap(Velocity3Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity3Stamped::InternalSwap(Velocity3Stamped* other) {
  std::swap(stamp_, other->stamp_);
  std::swap(velocity_, other->velocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity3Stamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity3Stamped_descriptor_;
  metadata.reflection = Velocity3Stamped_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity3Stamped

// required .MaxBotMessages.Stamp stamp = 1;
bool Velocity3Stamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Velocity3Stamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Velocity3Stamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Velocity3Stamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
const ::MaxBotMessages::Stamp& Velocity3Stamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity3Stamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::MaxBotMessages::Stamp* Velocity3Stamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity3Stamped.stamp)
  return stamp_;
}
::MaxBotMessages::Stamp* Velocity3Stamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Velocity3Stamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity3Stamped.stamp)
}

// required .MaxBotMessages.Velocity3 velocity = 2;
bool Velocity3Stamped::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Velocity3Stamped::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Velocity3Stamped::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Velocity3Stamped::clear_velocity() {
  if (velocity_ != NULL) velocity_->::MaxBotMessages::Velocity3::Clear();
  clear_has_velocity();
}
const ::MaxBotMessages::Velocity3& Velocity3Stamped::velocity() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity3Stamped.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::MaxBotMessages::Velocity3* Velocity3Stamped::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::MaxBotMessages::Velocity3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity3Stamped.velocity)
  return velocity_;
}
::MaxBotMessages::Velocity3* Velocity3Stamped::release_velocity() {
  clear_has_velocity();
  ::MaxBotMessages::Velocity3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Velocity3Stamped::set_allocated_velocity(::MaxBotMessages::Velocity3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity3Stamped.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity2::kLinearFieldNumber;
const int Velocity2::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity2::Velocity2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Velocity2)
}

void Velocity2::InitAsDefaultInstance() {
}

Velocity2::Velocity2(const Velocity2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Velocity2)
}

void Velocity2::SharedCtor() {
  _cached_size_ = 0;
  linear_ = 0;
  angular_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity2::~Velocity2() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Velocity2)
  SharedDtor();
}

void Velocity2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Velocity2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity2_descriptor_;
}

const Velocity2& Velocity2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Velocity_2eproto();
  return *default_instance_;
}

Velocity2* Velocity2::default_instance_ = NULL;

Velocity2* Velocity2::New(::google::protobuf::Arena* arena) const {
  Velocity2* n = new Velocity2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity2::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Velocity2*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(linear_, angular_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Velocity2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Velocity2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double linear = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_)));
          set_has_linear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_angular;
        break;
      }

      // required double angular = 2;
      case 2: {
        if (tag == 17) {
         parse_angular:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_)));
          set_has_angular();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Velocity2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Velocity2)
  return false;
#undef DO_
}

void Velocity2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Velocity2)
  // required double linear = 1;
  if (has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->linear(), output);
  }

  // required double angular = 2;
  if (has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angular(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Velocity2)
}

::google::protobuf::uint8* Velocity2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Velocity2)
  // required double linear = 1;
  if (has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->linear(), target);
  }

  // required double angular = 2;
  if (has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angular(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Velocity2)
  return target;
}

int Velocity2::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_linear()) {
    // required double linear = 1;
    total_size += 1 + 8;
  }

  if (has_angular()) {
    // required double angular = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Velocity2::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double linear = 1;
    total_size += 1 + 8;

    // required double angular = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Velocity2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity2::MergeFrom(const Velocity2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear()) {
      set_linear(from.linear());
    }
    if (from.has_angular()) {
      set_angular(from.angular());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Velocity2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity2::CopyFrom(const Velocity2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Velocity2::Swap(Velocity2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity2::InternalSwap(Velocity2* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity2_descriptor_;
  metadata.reflection = Velocity2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity2

// required double linear = 1;
bool Velocity2::has_linear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Velocity2::set_has_linear() {
  _has_bits_[0] |= 0x00000001u;
}
void Velocity2::clear_has_linear() {
  _has_bits_[0] &= ~0x00000001u;
}
void Velocity2::clear_linear() {
  linear_ = 0;
  clear_has_linear();
}
 double Velocity2::linear() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity2.linear)
  return linear_;
}
 void Velocity2::set_linear(double value) {
  set_has_linear();
  linear_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Velocity2.linear)
}

// required double angular = 2;
bool Velocity2::has_angular() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Velocity2::set_has_angular() {
  _has_bits_[0] |= 0x00000002u;
}
void Velocity2::clear_has_angular() {
  _has_bits_[0] &= ~0x00000002u;
}
void Velocity2::clear_angular() {
  angular_ = 0;
  clear_has_angular();
}
 double Velocity2::angular() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity2.angular)
  return angular_;
}
 void Velocity2::set_angular(double value) {
  set_has_angular();
  angular_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Velocity2.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity2Stamped::kStampFieldNumber;
const int Velocity2Stamped::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity2Stamped::Velocity2Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxBotMessages.Velocity2Stamped)
}

void Velocity2Stamped::InitAsDefaultInstance() {
  stamp_ = const_cast< ::MaxBotMessages::Stamp*>(&::MaxBotMessages::Stamp::default_instance());
  velocity_ = const_cast< ::MaxBotMessages::Velocity2*>(&::MaxBotMessages::Velocity2::default_instance());
}

Velocity2Stamped::Velocity2Stamped(const Velocity2Stamped& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MaxBotMessages.Velocity2Stamped)
}

void Velocity2Stamped::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity2Stamped::~Velocity2Stamped() {
  // @@protoc_insertion_point(destructor:MaxBotMessages.Velocity2Stamped)
  SharedDtor();
}

void Velocity2Stamped::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete velocity_;
  }
}

void Velocity2Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity2Stamped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity2Stamped_descriptor_;
}

const Velocity2Stamped& Velocity2Stamped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Velocity_2eproto();
  return *default_instance_;
}

Velocity2Stamped* Velocity2Stamped::default_instance_ = NULL;

Velocity2Stamped* Velocity2Stamped::New(::google::protobuf::Arena* arena) const {
  Velocity2Stamped* n = new Velocity2Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity2Stamped::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::MaxBotMessages::Velocity2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Velocity2Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaxBotMessages.Velocity2Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MaxBotMessages.Stamp stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // required .MaxBotMessages.Velocity2 velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaxBotMessages.Velocity2Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaxBotMessages.Velocity2Stamped)
  return false;
#undef DO_
}

void Velocity2Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaxBotMessages.Velocity2Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stamp_, output);
  }

  // required .MaxBotMessages.Velocity2 velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MaxBotMessages.Velocity2Stamped)
}

::google::protobuf::uint8* Velocity2Stamped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxBotMessages.Velocity2Stamped)
  // required .MaxBotMessages.Stamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stamp_, target);
  }

  // required .MaxBotMessages.Velocity2 velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->velocity_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxBotMessages.Velocity2Stamped)
  return target;
}

int Velocity2Stamped::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_stamp()) {
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);
  }

  if (has_velocity()) {
    // required .MaxBotMessages.Velocity2 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  return total_size;
}
int Velocity2Stamped::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MaxBotMessages.Stamp stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stamp_);

    // required .MaxBotMessages.Velocity2 velocity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity2Stamped::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Velocity2Stamped* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity2Stamped>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity2Stamped::MergeFrom(const Velocity2Stamped& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::MaxBotMessages::Stamp::MergeFrom(from.stamp());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::MaxBotMessages::Velocity2::MergeFrom(from.velocity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Velocity2Stamped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity2Stamped::CopyFrom(const Velocity2Stamped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity2Stamped::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stamp()) {
    if (!this->stamp_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void Velocity2Stamped::Swap(Velocity2Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity2Stamped::InternalSwap(Velocity2Stamped* other) {
  std::swap(stamp_, other->stamp_);
  std::swap(velocity_, other->velocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity2Stamped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity2Stamped_descriptor_;
  metadata.reflection = Velocity2Stamped_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity2Stamped

// required .MaxBotMessages.Stamp stamp = 1;
bool Velocity2Stamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Velocity2Stamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Velocity2Stamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Velocity2Stamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
const ::MaxBotMessages::Stamp& Velocity2Stamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity2Stamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
::MaxBotMessages::Stamp* Velocity2Stamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity2Stamped.stamp)
  return stamp_;
}
::MaxBotMessages::Stamp* Velocity2Stamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
void Velocity2Stamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity2Stamped.stamp)
}

// required .MaxBotMessages.Velocity2 velocity = 2;
bool Velocity2Stamped::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Velocity2Stamped::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Velocity2Stamped::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Velocity2Stamped::clear_velocity() {
  if (velocity_ != NULL) velocity_->::MaxBotMessages::Velocity2::Clear();
  clear_has_velocity();
}
const ::MaxBotMessages::Velocity2& Velocity2Stamped::velocity() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Velocity2Stamped.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::MaxBotMessages::Velocity2* Velocity2Stamped::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::MaxBotMessages::Velocity2;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Velocity2Stamped.velocity)
  return velocity_;
}
::MaxBotMessages::Velocity2* Velocity2Stamped::release_velocity() {
  clear_has_velocity();
  ::MaxBotMessages::Velocity2* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Velocity2Stamped::set_allocated_velocity(::MaxBotMessages::Velocity2* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Velocity2Stamped.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxBotMessages

// @@protoc_insertion_point(global_scope)
