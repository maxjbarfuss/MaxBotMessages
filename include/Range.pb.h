// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Range.proto

#ifndef PROTOBUF_Range_2eproto__INCLUDED
#define PROTOBUF_Range_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Stamp.pb.h"
#include "StandardTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace MaxBotMessages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Range_2eproto();
void protobuf_AssignDesc_Range_2eproto();
void protobuf_ShutdownFile_Range_2eproto();

class RangeStamped;

// ===================================================================

class RangeStamped : public ::google::protobuf::Message {
 public:
  RangeStamped();
  virtual ~RangeStamped();

  RangeStamped(const RangeStamped& from);

  inline RangeStamped& operator=(const RangeStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeStamped& default_instance();

  void Swap(RangeStamped* other);

  // implements Message ----------------------------------------------

  inline RangeStamped* New() const { return New(NULL); }

  RangeStamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeStamped& from);
  void MergeFrom(const RangeStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MaxBotMessages.Stamp stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::MaxBotMessages::Stamp& stamp() const;
  ::MaxBotMessages::Stamp* mutable_stamp();
  ::MaxBotMessages::Stamp* release_stamp();
  void set_allocated_stamp(::MaxBotMessages::Stamp* stamp);

  // required .MaxBotMessages.Double range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::MaxBotMessages::Double& range() const;
  ::MaxBotMessages::Double* mutable_range();
  ::MaxBotMessages::Double* release_range();
  void set_allocated_range(::MaxBotMessages::Double* range);

  // @@protoc_insertion_point(class_scope:MaxBotMessages.RangeStamped)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_range();
  inline void clear_has_range();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MaxBotMessages::Stamp* stamp_;
  ::MaxBotMessages::Double* range_;
  friend void  protobuf_AddDesc_Range_2eproto();
  friend void protobuf_AssignDesc_Range_2eproto();
  friend void protobuf_ShutdownFile_Range_2eproto();

  void InitAsDefaultInstance();
  static RangeStamped* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeStamped

// required .MaxBotMessages.Stamp stamp = 1;
inline bool RangeStamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeStamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeStamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeStamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
inline const ::MaxBotMessages::Stamp& RangeStamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.RangeStamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::MaxBotMessages::Stamp* RangeStamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.RangeStamped.stamp)
  return stamp_;
}
inline ::MaxBotMessages::Stamp* RangeStamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void RangeStamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.RangeStamped.stamp)
}

// required .MaxBotMessages.Double range = 2;
inline bool RangeStamped::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeStamped::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeStamped::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeStamped::clear_range() {
  if (range_ != NULL) range_->::MaxBotMessages::Double::Clear();
  clear_has_range();
}
inline const ::MaxBotMessages::Double& RangeStamped::range() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.RangeStamped.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::MaxBotMessages::Double* RangeStamped::mutable_range() {
  set_has_range();
  if (range_ == NULL) {
    range_ = new ::MaxBotMessages::Double;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.RangeStamped.range)
  return range_;
}
inline ::MaxBotMessages::Double* RangeStamped::release_range() {
  clear_has_range();
  ::MaxBotMessages::Double* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RangeStamped::set_allocated_range(::MaxBotMessages::Double* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.RangeStamped.range)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxBotMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Range_2eproto__INCLUDED
