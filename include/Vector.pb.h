// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vector.proto

#ifndef PROTOBUF_Vector_2eproto__INCLUDED
#define PROTOBUF_Vector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Stamp.pb.h"
// @@protoc_insertion_point(includes)

namespace MaxBotMessages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Vector_2eproto();
void protobuf_AssignDesc_Vector_2eproto();
void protobuf_ShutdownFile_Vector_2eproto();

class Quaternion;
class QuaternionStamped;
class Vector3;
class Vector3Stamped;

// ===================================================================

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:MaxBotMessages.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_Vector_2eproto();
  friend void protobuf_AssignDesc_Vector_2eproto();
  friend void protobuf_ShutdownFile_Vector_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  inline Quaternion* New() const { return New(NULL); }

  Quaternion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Quaternion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double w = 1;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 1;
  double w() const;
  void set_w(double value);

  // required double x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // required double y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // required double z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:MaxBotMessages.Quaternion)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double w_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_Vector_2eproto();
  friend void protobuf_AssignDesc_Vector_2eproto();
  friend void protobuf_ShutdownFile_Vector_2eproto();

  void InitAsDefaultInstance();
  static Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class Vector3Stamped : public ::google::protobuf::Message {
 public:
  Vector3Stamped();
  virtual ~Vector3Stamped();

  Vector3Stamped(const Vector3Stamped& from);

  inline Vector3Stamped& operator=(const Vector3Stamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3Stamped& default_instance();

  void Swap(Vector3Stamped* other);

  // implements Message ----------------------------------------------

  inline Vector3Stamped* New() const { return New(NULL); }

  Vector3Stamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3Stamped& from);
  void MergeFrom(const Vector3Stamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3Stamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MaxBotMessages.Stamp stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::MaxBotMessages::Stamp& stamp() const;
  ::MaxBotMessages::Stamp* mutable_stamp();
  ::MaxBotMessages::Stamp* release_stamp();
  void set_allocated_stamp(::MaxBotMessages::Stamp* stamp);

  // required .MaxBotMessages.Vector3 vector = 2;
  bool has_vector() const;
  void clear_vector();
  static const int kVectorFieldNumber = 2;
  const ::MaxBotMessages::Vector3& vector() const;
  ::MaxBotMessages::Vector3* mutable_vector();
  ::MaxBotMessages::Vector3* release_vector();
  void set_allocated_vector(::MaxBotMessages::Vector3* vector);

  // @@protoc_insertion_point(class_scope:MaxBotMessages.Vector3Stamped)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_vector();
  inline void clear_has_vector();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MaxBotMessages::Stamp* stamp_;
  ::MaxBotMessages::Vector3* vector_;
  friend void  protobuf_AddDesc_Vector_2eproto();
  friend void protobuf_AssignDesc_Vector_2eproto();
  friend void protobuf_ShutdownFile_Vector_2eproto();

  void InitAsDefaultInstance();
  static Vector3Stamped* default_instance_;
};
// -------------------------------------------------------------------

class QuaternionStamped : public ::google::protobuf::Message {
 public:
  QuaternionStamped();
  virtual ~QuaternionStamped();

  QuaternionStamped(const QuaternionStamped& from);

  inline QuaternionStamped& operator=(const QuaternionStamped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuaternionStamped& default_instance();

  void Swap(QuaternionStamped* other);

  // implements Message ----------------------------------------------

  inline QuaternionStamped* New() const { return New(NULL); }

  QuaternionStamped* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuaternionStamped& from);
  void MergeFrom(const QuaternionStamped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuaternionStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MaxBotMessages.Stamp stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::MaxBotMessages::Stamp& stamp() const;
  ::MaxBotMessages::Stamp* mutable_stamp();
  ::MaxBotMessages::Stamp* release_stamp();
  void set_allocated_stamp(::MaxBotMessages::Stamp* stamp);

  // required .MaxBotMessages.Quaternion quaternion = 2;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 2;
  const ::MaxBotMessages::Quaternion& quaternion() const;
  ::MaxBotMessages::Quaternion* mutable_quaternion();
  ::MaxBotMessages::Quaternion* release_quaternion();
  void set_allocated_quaternion(::MaxBotMessages::Quaternion* quaternion);

  // @@protoc_insertion_point(class_scope:MaxBotMessages.QuaternionStamped)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_quaternion();
  inline void clear_has_quaternion();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MaxBotMessages::Stamp* stamp_;
  ::MaxBotMessages::Quaternion* quaternion_;
  friend void  protobuf_AddDesc_Vector_2eproto();
  friend void protobuf_AssignDesc_Vector_2eproto();
  friend void protobuf_ShutdownFile_Vector_2eproto();

  void InitAsDefaultInstance();
  static QuaternionStamped* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// required double x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Vector3.x)
  return x_;
}
inline void Vector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Vector3.x)
}

// required double y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Vector3.y)
  return y_;
}
inline void Vector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Vector3.y)
}

// required double z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Vector3.z)
  return z_;
}
inline void Vector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Vector3.z)
}

// -------------------------------------------------------------------

// Quaternion

// required double w = 1;
inline bool Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Quaternion.w)
}

// required double x = 2;
inline bool Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Quaternion.x)
}

// required double y = 3;
inline bool Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Quaternion.y)
}

// required double z = 4;
inline bool Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:MaxBotMessages.Quaternion.z)
}

// -------------------------------------------------------------------

// Vector3Stamped

// required .MaxBotMessages.Stamp stamp = 1;
inline bool Vector3Stamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3Stamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3Stamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3Stamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
inline const ::MaxBotMessages::Stamp& Vector3Stamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Vector3Stamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::MaxBotMessages::Stamp* Vector3Stamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Vector3Stamped.stamp)
  return stamp_;
}
inline ::MaxBotMessages::Stamp* Vector3Stamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void Vector3Stamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Vector3Stamped.stamp)
}

// required .MaxBotMessages.Vector3 vector = 2;
inline bool Vector3Stamped::has_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3Stamped::set_has_vector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3Stamped::clear_has_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3Stamped::clear_vector() {
  if (vector_ != NULL) vector_->::MaxBotMessages::Vector3::Clear();
  clear_has_vector();
}
inline const ::MaxBotMessages::Vector3& Vector3Stamped::vector() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.Vector3Stamped.vector)
  return vector_ != NULL ? *vector_ : *default_instance_->vector_;
}
inline ::MaxBotMessages::Vector3* Vector3Stamped::mutable_vector() {
  set_has_vector();
  if (vector_ == NULL) {
    vector_ = new ::MaxBotMessages::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.Vector3Stamped.vector)
  return vector_;
}
inline ::MaxBotMessages::Vector3* Vector3Stamped::release_vector() {
  clear_has_vector();
  ::MaxBotMessages::Vector3* temp = vector_;
  vector_ = NULL;
  return temp;
}
inline void Vector3Stamped::set_allocated_vector(::MaxBotMessages::Vector3* vector) {
  delete vector_;
  vector_ = vector;
  if (vector) {
    set_has_vector();
  } else {
    clear_has_vector();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.Vector3Stamped.vector)
}

// -------------------------------------------------------------------

// QuaternionStamped

// required .MaxBotMessages.Stamp stamp = 1;
inline bool QuaternionStamped::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuaternionStamped::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuaternionStamped::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuaternionStamped::clear_stamp() {
  if (stamp_ != NULL) stamp_->::MaxBotMessages::Stamp::Clear();
  clear_has_stamp();
}
inline const ::MaxBotMessages::Stamp& QuaternionStamped::stamp() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.QuaternionStamped.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::MaxBotMessages::Stamp* QuaternionStamped::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) {
    stamp_ = new ::MaxBotMessages::Stamp;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.QuaternionStamped.stamp)
  return stamp_;
}
inline ::MaxBotMessages::Stamp* QuaternionStamped::release_stamp() {
  clear_has_stamp();
  ::MaxBotMessages::Stamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void QuaternionStamped::set_allocated_stamp(::MaxBotMessages::Stamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.QuaternionStamped.stamp)
}

// required .MaxBotMessages.Quaternion quaternion = 2;
inline bool QuaternionStamped::has_quaternion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuaternionStamped::set_has_quaternion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuaternionStamped::clear_has_quaternion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuaternionStamped::clear_quaternion() {
  if (quaternion_ != NULL) quaternion_->::MaxBotMessages::Quaternion::Clear();
  clear_has_quaternion();
}
inline const ::MaxBotMessages::Quaternion& QuaternionStamped::quaternion() const {
  // @@protoc_insertion_point(field_get:MaxBotMessages.QuaternionStamped.quaternion)
  return quaternion_ != NULL ? *quaternion_ : *default_instance_->quaternion_;
}
inline ::MaxBotMessages::Quaternion* QuaternionStamped::mutable_quaternion() {
  set_has_quaternion();
  if (quaternion_ == NULL) {
    quaternion_ = new ::MaxBotMessages::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:MaxBotMessages.QuaternionStamped.quaternion)
  return quaternion_;
}
inline ::MaxBotMessages::Quaternion* QuaternionStamped::release_quaternion() {
  clear_has_quaternion();
  ::MaxBotMessages::Quaternion* temp = quaternion_;
  quaternion_ = NULL;
  return temp;
}
inline void QuaternionStamped::set_allocated_quaternion(::MaxBotMessages::Quaternion* quaternion) {
  delete quaternion_;
  quaternion_ = quaternion;
  if (quaternion) {
    set_has_quaternion();
  } else {
    clear_has_quaternion();
  }
  // @@protoc_insertion_point(field_set_allocated:MaxBotMessages.QuaternionStamped.quaternion)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MaxBotMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Vector_2eproto__INCLUDED
